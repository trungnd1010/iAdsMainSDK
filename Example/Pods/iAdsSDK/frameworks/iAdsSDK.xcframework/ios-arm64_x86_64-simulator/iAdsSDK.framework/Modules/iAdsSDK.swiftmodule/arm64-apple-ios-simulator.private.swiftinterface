// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name iAdsSDK
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iAdsCoreSDK
@_exported import iAdsSDK
import iComponentsSDK
import iLogSDK
import iReadFileConfigSDK
import iRemoteConfigSDK
import iSecuritySDK
import iTrackingSDK
@_hasMissingDesignatedInitializers public class iAdsSDK_IntertitialManager {
  public static let shared: iAdsSDK.iAdsSDK_IntertitialManager
  @_Concurrency.MainActor public func showAds(vc: UIKit.UIViewController, placement: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func preloadAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class iAdsSDK_OpenManager {
  public static let shared: iAdsSDK.iAdsSDK_OpenManager
  @_Concurrency.MainActor public func showAds(vc: UIKit.UIViewController, containerView: UIKit.UIView, s placement: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func preloadAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
infix operator <- : DefaultPrecedence
public enum AdsName : Swift.String, Swift.Codable {
  case ads_mod
  case ads_max
  case ads_gam
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class iAdsSDK_NativeManager {
  public static let shared: iAdsSDK.iAdsSDK_NativeManager
  @_Concurrency.MainActor public func showAds(vc: UIKit.UIViewController, containerView: UIKit.UIView, nativeAdmobView: UIKit.UIView, nativeMaxView: UIKit.UIView, placement: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func preloadAds(screenName: Swift.String?, vc: UIKit.UIViewController, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class iAdsSDKManager {
  public static let shared: iAdsSDK.iAdsSDKManager
  public var isCanShowAds: Swift.Bool
  public var isCanShowAdsResume: Swift.Bool
  public var vc: UIKit.UIViewController
  public var maxKey: Swift.String
  public func setup(isTestAds: Swift.Bool, interManager: [iAdsSDK.AdsName : any iAdsCoreSDK.iAdsCoreSDK_IntertitialProtocol.Type], openManager: [iAdsSDK.AdsName : any iAdsCoreSDK.iAdsCoreSDK_OpenProtocol.Type], rewardedManager: [iAdsSDK.AdsName : any iAdsCoreSDK.iAdsCoreSDK_RewardedProtocol.Type], bannerManager: [iAdsSDK.AdsName : any iAdsCoreSDK.iAdsCoreSDK_BannerProtocol.Type], nativeManager: [iAdsSDK.AdsName : any iAdsCoreSDK.iAdsCoreSDK_NativeProtocol.Type])
  public func getData(vc: UIKit.UIViewController, completionLoadAds: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor public func showAdsStart(completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor public func showAdsFull(vc: UIKit.UIViewController, screenName: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor public func showAdsWidget(containerView: UIKit.UIView, nativeAdmobView: UIKit.UIView, nativeMaxView: UIKit.UIView, screenName: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func isCanShowAdsFull(screenName: Swift.String) -> Swift.Bool
  public func isCanshowAdsWidget(screenName: Swift.String) -> Swift.Bool
  public func preLoadOpenAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  public func preLoadInterAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  public func preLoadRewardedAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  public func preLoadNativeAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class iAdsSDK_RewardedManager {
  public static let shared: iAdsSDK.iAdsSDK_RewardedManager
  @_Concurrency.MainActor public func showAds(vc: UIKit.UIViewController, containerView: UIKit.UIView, s placement: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func preloadAds(screenName: Swift.String?, completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
extension iAdsSDK.AdsName : Swift.Equatable {}
extension iAdsSDK.AdsName : Swift.Hashable {}
extension iAdsSDK.AdsName : Swift.RawRepresentable {}
